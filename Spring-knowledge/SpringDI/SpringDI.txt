■Spring DI

・Springによるインスタンス管理の仕組み
・デフォルトでSingletonのため、基本的にDIコンテナで生成された同一インスタンスを再利用

■DIの仕組みについて

・DIコンテナ：Javaインスタンスを管理する箱
・Bean：DIコンテナで管理されるJavaインスタンスの名前
・Singleton：一つのインスタンスのみを持ち、グローバルにアクセス可能なクラス

①Bean定義について

・ステレオタイプアノテーションによるBean定義

該当クラスに@Componentを付与する
※@Controller、@Service、@Repositoryは@Componentを内包する為、コントローラークラスやロジッククラスもBean定義をしている

・JavaConfigによるBean定義

該当クラスに@Configurationを付与して該当メソッドに@Beanを付与する
※何かしらの設定を加えた上でBean定義をしたい場合に使用（※RestTemplateなど）

※xmlファイルを用いてBean定義することも可能

②DIコンテナへのBean登録

SpringBootでは@ComponentScan（@SpringBootApplicationに内包されている）によって登録される

③DI（依存性の注入）

該当の変数に@Autowiredを付与することでSpringが自動的にインスタンスを代入する

■メリット

①無断なインスタンス消費を抑える

Webアプリケーションにて
new演算子によるインスタンス生成をしている場合、
リクエストがある度にコントローラークラスやロジッククラスのインスタンスが生成されるため、
無駄にメモリを消費してしまう

②結合度が下がる

インスタンスの生成～代入までの処理を外部処理として切り離すことができる

■デメリット

①データを保持するクラスには使用されない

Beanは基本的に一つのインスタンスのみとなるため、グローバルに共有される（※アプリケーション全体で使用）
データを保持するクラスに対して使用すると、予期しない動作やデータの競合が発生するリスクがある
※複数からリクエストされたデータを一つのインスタンスで保持するのは危険なため、
  リクエストクラスやレスポンスクラスなどはnew演算子により個別のインスタンスを用意する
